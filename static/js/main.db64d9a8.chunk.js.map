{"version":3,"sources":["ModalitiesPage.js","App.js","reportWebVitals.js","index.js"],"names":["ModalitiesPage","summary","source","modality","file_path","description","useState","data","setData","useEffect","get","process","then","csv","csvParse","catch","console","log","completionData","reduce","res","value","count","visibleData","length","slice","filter","d","className","f","parseFloat","toFixed","sum","VegaLite","spec","profilesSummaryPath","App","profilesSummary","setProfilesSummary","map","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db64d9a8.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {VegaLite} from 'react-vega';\nimport get from 'axios';\nimport {csvParse} from 'd3-dsv';\n// import Table from 'rc-table';\n\nconst MAX_MODALITIES_IN_VIZ = 40;\n\nfunction ModalitiesPage({\n  summary: {\n    source, \n    modality, \n    file_path, \n    description = ''\n}}) {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    get(`${process.env.PUBLIC_URL}/${file_path}`)\n    .then(({data: csv}) => {\n      const data = csvParse(csv);\n      setData(data);\n    })\n    .catch(() => {\n      console.log(`could not get ${process.env.PUBLIC_URL}/${file_path}`)\n    })\n  }, [file_path]);\n  const completionData = data.reduce((res, {value, count}) => {\n      if (value === 'vide') {\n        res[0].count += (+count);\n      }\n      else {\n        res[1].count += (+count);\n      }\n      return res;\n    }, [{value: 'vide', count: 0}, {value: 'remplie', count: 0}])\n  const visibleData = (data.length > MAX_MODALITIES_IN_VIZ ? data.slice(0, MAX_MODALITIES_IN_VIZ) : data).filter(d => d.value !== 'vide');\n  return (\n    <section className=\"ModalitiesPage\">\n      <h2>{modality} ({source})</h2>\n      {\n        data.length ?\n        <div className=\"vis-container\">\n          {description && description.length ?\n          <>\n            <h3>Description de la dimension dans la doc</h3>\n            <blockquote>\n              {description}\n            </blockquote>\n          </>\n          : null}\n          <h3>Carte d'identité de la dimension</h3>\n          \n          <ul>\n            <li>Nombre total de modalités : {data.filter(f => f.value !== 'vide').length}</li>\n            <li>Exhaustivité (valeurs non-vides) : {parseFloat((completionData[1].count / (completionData[0].count + completionData[1].count)) * 100).toFixed(2)}% ({completionData[1].count} / {(completionData[0].count + completionData[1].count)})</li>\n            <li>contrôle cumulation des valeurs : {data.reduce((sum, modality) => sum + +modality.count , 0)} entrées</li>\n            <li>Nombre moyen de valeurs pour chaque modalité : {\n            ((data.filter(d => d.value !== 'vide').reduce((sum, modality) => sum + (+modality.count) , 0)) / data.length).toFixed(2)}</li>\n          </ul>\n          <h3>{data.length > MAX_MODALITIES_IN_VIZ ? `${MAX_MODALITIES_IN_VIZ} principales modalités` : 'Toutes les modalités'} : </h3>\n          <VegaLite spec={{\n            \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n            \"data\": {\n              \"values\": visibleData\n            },\n            \"layer\": [\n              {\n                \"mark\": \"bar\"\n              }, {\n                \"mark\": {\n                  \"type\": \"text\",\n                  \"align\": \"left\",\n                  \"baseline\": \"middle\",\n                  \"dx\": 3\n                },\n                \"encoding\": {\n                  \"text\": {\"field\": \"count\", \"type\": \"quantitative\"}\n                }\n              }\n            ],\n            \"encoding\": {\n              \"x\": {\n                \"field\": \"count\", \n                \"type\": \"quantitative\", \n                \"axis\": {\"labelAngle\": 0}},\n              \"y\": {\n                \"field\": \"value\", \n                \"type\": \"nominal\",\n                \"sort\": {\"field\": \"count\",  \"op\": \"mean\", \"order\": \"descending\"}\n              }\n            }\n          }} />\n        </div>\n        : null\n      }\n      {\n        /*\n        for control only\n        data.length && data.length < 300 ?\n        <Table \n          columns={Object.keys(data[0]).map(key => ({\n            title: key,\n            dataIndex: key,\n            key,\n            width: 100,\n          }))}  \n          data={data.sort((a, b) => {\n            if (+a.count > +b.count) {\n              return -1;\n            }\n            return 1;\n          })} \n        />\n        : null\n        */\n      }\n      \n    </section>\n  )\n}\n\nexport default ModalitiesPage;","import get from 'axios';\nimport {csvParse} from 'd3-dsv';\nimport {useState, useEffect} from 'react';\nimport ModalitiesPage from './ModalitiesPage';\nimport './App.css';\n\nconst profilesSummaryPath = `${process.env.PUBLIC_URL}/profiles_summary.csv`\n\nfunction App() {\n  const [profilesSummary, setProfilesSummary] = useState([]);\n  useEffect(() => {\n    get(profilesSummaryPath)\n    .then(({data: csv}) => {\n      const data = csvParse(csv);\n      setProfilesSummary(data);\n    })\n  }, [])\n  return profilesSummary.length ? (\n    <>\n      {\n        profilesSummary\n        // .filter(s => s.source === 'navigo')\n        .map((summary, index) => {\n          return (\n            <ModalitiesPage key={index} summary={summary} />\n          )\n        })\n      }\n    </>\n  ) : null;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}